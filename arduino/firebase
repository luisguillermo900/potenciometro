#include <Arduino.h>

#if defined(ESP32)
  #include <WiFi.h>
#elif defined(ESP8266)
  #include <ESP8266WiFi.h>
#endif

#include <WiFiClientSecure.h>
#include <FirebaseClient.h>
#include "ExampleFunctions.h"
#include <ArduinoJson.h>

// WiFi
#define WIFI_SSID "WIFI-FIPS"
#define WIFI_PASSWORD "WifiFips"

// Firebase
#define Web_API_KEY "AIzaSyCZUZC7mvx_HInzSNiHxjcqjpT1Jx-CBYc"
#define DATABASE_URL "https://esp-project-d56af-default-rtdb.europe-west1.firebasedatabase.app/"
#define USER_EMAIL "luischirinos900@gmail.com"
#define USER_PASS "mpnbfb2f"

// Pines
#define POT_PIN 35
const int output1 = 18;
const int output2 = 19;
const int output3 = 21;

// Temporizador
unsigned long lastSendTime = 0;
const unsigned long sendInterval = 10000;

// Rutas Firebase
String listenerPath = "board1/outputs/digital/";
String potPath = "board1/inputs/potenciometro";

// üîß Firebase Objetos
UserAuth user_auth(Web_API_KEY, USER_EMAIL, USER_PASS);
SSL_CLIENT ssl_client, stream_ssl_client;
FirebaseApp app;
using AsyncClient = AsyncClientClass;
AsyncClient aClient(ssl_client), streamClient(stream_ssl_client);
RealtimeDatabase Database;

// WiFi
void initWiFi() {
  WiFi.mode(WIFI_STA);
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Conectando a WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(1000);
  }
  Serial.println("\nConectado a WiFi. IP: " + WiFi.localIP().toString());
}

// Procesar eventos
void processData(AsyncResult &aResult) {
  if (!aResult.isResult()) return;

  if (aResult.isError()) {
    Serial.printf("Firebase error [%s]: %s (code %d)\n",
      aResult.uid().c_str(), aResult.error().message().c_str(), aResult.error().code());
  }

  if (aResult.available()) {
    RealtimeDatabaseResult &RTDB = aResult.to<RealtimeDatabaseResult>();

    if (RTDB.isStream()) {
      if (RTDB.type() == 6) {
        DynamicJsonDocument doc(512);
        DeserializationError error = deserializeJson(doc, RTDB.to<String>());
        if (error) {
          Serial.print("Error JSON: ");
          Serial.println(error.c_str());
          return;
        }
        for (JsonPair kv : doc.as<JsonObject>()) {
          int gpioPin = atoi(kv.key().c_str());
          bool state = kv.value().as<bool>();
          digitalWrite(gpioPin, state ? HIGH : LOW);
        }
      }

      if (RTDB.type() == 4 || RTDB.type() == 1) {
        int GPIO_number = RTDB.dataPath().substring(1).toInt();
        bool state = RTDB.to<bool>();
        digitalWrite(GPIO_number, state);
      }
    } else {
      Serial.printf("‚ÑπÔ∏è Firebase task: %s, payload: %s\n", aResult.uid().c_str(), aResult.c_str());
    }
  }
}

void setup() {
  Serial.begin(115200);

  // Pines de salida y entrada
  pinMode(output1, OUTPUT);
  pinMode(output2, OUTPUT);
  pinMode(output3, OUTPUT);
  pinMode(POT_PIN, INPUT);

  initWiFi();

  // Configurar conexi√≥n segura
  ssl_client.setInsecure();
  stream_ssl_client.setInsecure();

#if defined(ESP32)
  ssl_client.setConnectionTimeout(1000);
  ssl_client.setHandshakeTimeout(5);
  stream_ssl_client.setConnectionTimeout(1000);
  stream_ssl_client.setHandshakeTimeout(5);
#endif

  // Inicializar Firebase
  initializeApp(aClient, app, getAuth(user_auth), processData, "authTask");
  app.getApp<RealtimeDatabase>(Database);
  Database.url(DATABASE_URL);

  // Escuchar cambios en salidas digitales
  streamClient.setSSEFilters("get,put,patch,keep-alive,cancel,auth_revoked");
  Database.get(streamClient, listenerPath, processData, true, "streamTask");
}

void loop() {
  app.loop();

  if (app.ready()) {
    unsigned long currentTime = millis();
    if (currentTime - lastSendTime >= sendInterval) {
      lastSendTime = currentTime;

      // Leer valor del potenci√≥metro
      int potValue = analogRead(POT_PIN);
      Serial.print("Valor potenci√≥metro (GPIO 35): ");
      Serial.println(potValue);

      // Enviar a Firebase sin ETag
      bool enviado = Database.set(aClient, potPath, potValue, "");

      if (enviado) {
        Serial.println("Enviado a Firebase correctamente");
      } else {
        FirebaseError err = aClient.lastError();
        Serial.print("Error al enviar: ");
        Serial.println(err.message().c_str());
      }
    }
  } else {
    Serial.println("Firebase no est√° listo");
  }
}